heat_template_version: 2018-03-02

description: GCC Range Cyber Dawg 2021

######################################################
#
# GCC Cyber Dawg 2021 Exercise Range
#   [1] - parameters (domain, usernames, passwords)
#   [2] - resources (randstring) 
#   [3] - network analyst network config
#   [4] - internet network config
#   [5] - neutron router config
#   [6] - gcc vyos router config
#
#######################################################


parameters:
#[1] --- THIS ALLOWS FOR THE ADJUSTMENT OF THE RANGE IP ADDRESS SCHEME AS A WHOLE --- #
  domain:
    type: string
    label: Domain
    description: Set as '10.101.255.254'
    default: 10.101.255.254
    hidden: false

# --- SETS THE USER ID FOR INSTANCE NAMING CONVENTION --- #
  admin_user:
    type: string
    label: User Name
    description: Sets the login username for admin users on instances
    default: gacyberadmin
    hidden: true

  admin_pass:
    type: string
    label: Password
    description: Set admin password for each host
    default: "lilcliff"
    hidden: true 

  username:
    type: string
    label: User Name
    description: Sets the login username for the instances
    default: user
    hidden: false

  user_pass:
    type: string
    label: Password
    description: Sets the Login Password for the instances
    default: "gacyber"
    hidden: false


# --- THIS SETS A RANDOM STRING THAT IS ADDED TO THE END OF ALL INSTANCE NAMES IN VTA, ALLOW FOR THE SAME STACK TO BE BUILT MULTIPLE TIMES --- #


#[2] ----- Resources ----- #
resources:
  rand_string:
    type: OS::Heat::RandomString
    properties:
      length: 4


#[3] ----- Analyst Network Configuration Start ----- #
  analyst_network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: analyst_network_RAND
          params:
            RAND: { get_resource: rand_string }
      admin_state_up: true
      shared: false

  analyst_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ analyst_network ]
    properties:
      cidr: 10.220.0.0/24
      gateway_ip: 10.220.0.254
      dns_nameservers: [{ get_param: domain }]
      enable_dhcp: false
      ip_version: 4
      name:
        str_replace:
          template: analyst_subnet_RAND
          params:
            RAND: { get_resource: rand_string }
      network_id:
        get_resource: analyst_network
# ----- Analyst Network Configuration End ----- #


#[4] ----- Internet Network Configuration Start ----- #
  internet_network:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: internet_network_RAND
          params:
            RAND: { get_resource: rand_string }
      admin_state_up: true
      shared: false

  internet_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ internet_network ]
    properties:
      cidr: 10.100.0.0/24
      gateway_ip: 10.100.0.254
      dns_nameservers: [{ get_param: domain}]
      enable_dhcp: false
      ip_version: 4
      name:
        str_replace:
          template: internet_subnet_RAND
          params:
            RAND: { get_resource: rand_string }
      network_id:
        get_resource: internet_network
# ----- Internet Network Configuration End ----- #


#[5] ----- GCC Neutron Router Configuration Start ----- #
  gcc_neutron_router:
    depends_on: [ analyst_subnet ]
    type: OS::Neutron::Router
    properties:
      name:
        str_replace:
          template: gcc_neutron_router_RAND
          params:
            RAND: { get_resource: rand_string }
      external_gateway_info: {"network": public}

  gcc_net_interface:
    type:  OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: gcc_neutron_router }
      subnet_id: { get_resource: analyst_subnet }
  
  internet_net_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: gcc_neutron_router }
      subnet_id: { get_resource: internet_subnet }

  static-route-0:
    type: OS::Neutron::ExtraRoute
    depends_on: [ gcc_neutron_router ]
    properties:
      router_id: { get_resource: gcc_neutron_router }
      destination: 10.220.0.0/24
      nexthop: 10.220.0.253
# ----- GCC Neutron Router Configuration End ----- #

#[6] ----- GCC Vyos Router Configuration Start ----- #
  gcc_vyos_port:
    type: OS::Neutron::Port
    description: GCC VYOS IP
    properties:
      name:
        str_replace:
          template: gcc_vyos_port_RAND
          params:
            RAND: { get_resource: rand_string }
      network_id: { get_resource: internet_network }
      fixed_ips:
      - ip_address: 10.100.0.253
      port_security_enabled: false

  analyst_port:
    type: OS::Neutron::Port
    description: Analyst IP
    properties:
      name:
        str_replace:
          template: analyst_port_RAND
          params:
            RAND: { get_resource: rand_string }
      network_id: { get_resource: analyst_network }
      fixed_ips:
      - ip_address: 10.220.0.253
      port_security_enabled: false

  analyst_float_ip:
    type: OS::Neutron::FloatingIP
    description: Analyst Floating IP
    depends_on: gcc_neutron_router
    properties: { floating_network: public }

  analyst_float_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: internet_net_interface
    properties:
      port_id: { get_resource: analyst_port }
      floatingip_id: { get_resource: analyst_float_ip }
      
  gcc_vyos_rtr:
    depends_on: [ gcc_neutron_router ]
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: gcc_rtr_RAND
          params:
            RAND: { get_resource: rand_string }
      image: vyos-1.3
      flavor: hack.c2.m4.d32
      diskConfig: AUTO
      networks:
        - port: { get_resource: gcc_vyos_port }
        - port: { get_resource: analyst_port }
      config_drive: true
      user_data_format: RAW
      user_data:
        str_replace: 
          template: |
            cat <<EOF > install.sh
            #!/bin/vbash
            # Base OS Changes

            source /opt/vyatta/etc/functions/script-template
            configure

            # Nat rules for outbound traffic
            set nat source rule 100 outbound-interface 'eth0'
            set nat source rule 100 'source'
            set nat source rule 100 translation address 'masquerade'

            # System Services
            set service ssh allow-root
            set service ssh port '22'

            # System Properties
            set system config-management commit-revisions '20'
            set system console device ttyS0 speed '9600'
            set system host-name 'gcc_vyos_rtr'
            set system login user vyos authentication plaintext-password '$userpass'
            set system login user root authentication plaintext-password '$adminpass'
            set system login user root level 'admin'
            set system package auto-sync '1'
            set system package repository community components 'main'
            set system package repository community distribution 'helium'
            set system package repository community password ''
            set system package repository community url 'http://packages.vyos.net/vyos'
            set system package repository community username ''
            set system syslog global facility all level 'notice'
            set system syslog global facility protocols level 'debug'
            set system time-zone 'UTC'

            # Router Interfaces
            set interfaces ethernet eth0 description 'INTERNET'
            set interfaces ethernet eth0 address '10.100.0.253/24'
            set interfaces ethernet eth1 description 'ANALYST_NET'
            set interfaces ethernet eth1 address '10.220.0.253/24'
            set interfaces loopback 'lo'
            set interfaces loopback address '10.100.0.1/32'  

            # Default Route to Internet
            set protocols static route 0.0.0.0/0 next-hop 10.100.0.253 distance '1'

            commit
            save
            done
            EOF

            ./install.sh

            reboot
          params:
            $userpass: { get_param: user_pass }
            $adminpass: { get_param: admin_pass }
# ----- GCC Vyos Router Configuration End ----- #


#[7] ----- Analyst Workstation Configuration Start ----- #
  analyst_workstation_port:
    type: OS::Neutron::Port
    description: Analyst IP
    properties:
      name:
        str_replace:
          template: analyst_workstation_port_RAND
          params:
            RAND: { get_resource: rand_string }
      network_id: { get_resource: analyst_network }
      fixed_ips:
      - ip_address: 10.220.0.3
      port_security_enabled: false

  analyst_workstation_float_ip:
    type: OS::Neutron::FloatingIP
    description: Analyst Floating IP
    depends_on: gcc_neutron_router
    properties: { floating_network: public }

  analyst_float_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: internet_net_interface
    properties:
      port_id: { get_resource: analyst_workstation_port }
      floatingip_id: { get_resource: analyst_workstation_float_ip }

  analyst_workstation:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: analyst_workstation_RAND
          params:
            RAND: { get_resource: rand_string }
      image: ubuntu2004-lxqt
      flavor: hack.c2.m4.d64
      networks:
        - port: { get_resource: analyst_workstation_port }
      diskConfig: AUTO
      config_drive: true
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            # ----- CREATES USER GROUPS
            echo "root:$pass" | chpasswd
            useradd -m -U -s /bin/bash $user
            usermod -aG sudo $user
            echo "$user:$userpass" | chpasswd

            echo "domain kinetic" > /etc/resolv.conf
            echo "search kinetic" >>/etc/resolv.conf
            echo "nameserver $domain" >>/etc/resolv.conf

            # ----- ENABLE SUDO NOPASSWD
            sed -i '/# %wheel        ALL=(ALL)       NOPASSWD: ALL/ c\%wheel        ALL=(ALL)       NOPASSWD: ALL' /etc/sudoers

            # ----- ENABLES SSH[8]in prohibit-password/ c\PermitRootLogin yes' /etc/ssh/sshd_config
            sed -i '/#Port 22/ c\Port 22' /etc/ssh/sshd_config
            sed -i '/#AllowTcpForwarding yes/AllowTcpForwarding yes/' /etc/ssh/sshd_config
            service sshd restart

            # ----- CREATES USER GROUPS
            echo "root:$pass" | chpasswd
            useradd -m -U -s /bin/bash $user
            usermod -aG sudo $user
            echo "$user:$pass" | chpasswd

            # ----- updates

            apt-get update -y
            apt-get upgrade -y

            reboot

          params:
            $user: { get_param: username }
            $pass: { get_param: user_pass }
            $domain: { get_param: domain }
# ----- Analyst Workstation Configuration End ----- #

#[8] ----- Attacker Workstation Configuration Start ----- #
  attacker_port:
    type: OS::Neutron::Port
    description: attacker IP
    properties:
      name:
        str_replace:
          template: attacker_port_RAND
          params:
            RAND: { get_resource: rand_string }
      network_id: { get_resource: analyst_network }
      fixed_ips:
      - ip_address: 10.220.0.20
      port_security_enabled: false

  attacker_float_ip:
    type: OS::Neutron::FloatingIP
    description: Attacker Floating IP
    depends_on: gcc_neutron_router
    properties: { floating_network: public }

  attacker_float_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: internet_net_interface
    properties:
      port_id: { get_resource: attacker_port }
      floatingip_id: { get_resource: attacker_float_ip }
  
  attacker_workstation:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: attacker_workstation_RAND
          params:
            RAND: { get_resource: rand_string }
      image: debian10-kali
      flavor: hack.c2.m4.d64
      networks:
        - port: { get_resource: attacker_port }
      diskConfig: AUTO
      config_drive: true
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            # ----- CREATES USER GROUPS
            echo "root:$pass" | chpasswd
            useradd -m -U -s /bin/bash $user
            usermod -aG sudo $user
            echo "$user:$userpass" | chpasswd

            echo "domain kinetic" > /etc/resolv.conf
            echo "search kinetic" >>/etc/resolv.conf
            echo "nameserver $domain" >>/etc/resolv.conf

            # ----- ENABLE SUDO NOPASSWD
            sed -i '/# %wheel        ALL=(ALL)       NOPASSWD: ALL/ c\%wheel        ALL=(ALL)       NOPASSWD: ALL' /etc/sudoers

            # ----- ENABLES SSH[8]in prohibit-password/ c\PermitRootLogin yes' /etc/ssh/sshd_config
            sed -i '/#Port 22/ c\Port 22' /etc/ssh/sshd_config
            sed -i '/#AllowTcpForwarding yes/AllowTcpForwarding yes/' /etc/ssh/sshd_config
            service sshd restart

            # ----- CREATES USER GROUPS
            echo "root:$pass" | chpasswd
            useradd -m -U -s /bin/bash $user
            usermod -aG sudo $user
            echo "$user:$pass" | chpasswd

            # ----- updates
            apt-get update -y
            apt-get upgrade -y
            modprobe -I psmouse

            reboot

          params:
            $user: { get_param: username }
            $pass: { get_param: user_pass }
            $domain: { get_param: domain }
# ----- Attacker Workstation Configuration Start ----- #
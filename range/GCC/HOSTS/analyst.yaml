heat_template_version: 2018-03-02

description: GCC Range Cyber Dawg 2021

# -- Parameters used by all other config templates
parameters:
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used for the compute instance.
    default: hack.c2.m4.d32

  image:
    type: string
    label: Image name or ID
    description: Image to be used for the server.
    default: ubuntu2004-lxqt

  username:
    type: string
    label: User Name
    description: Sets the login username for the instances
    default: user
    hidden: false

  user_pass:
    type: string
    label: Password
    description: Sets the Login Password for the instances
    default: gacyber
    hidden: false

  admin_user:
    type: string
    label: User Name
    description: Sets the login username for admin users on instances
    default: gacyberadmin
    hidden: true

  admin_pass:
    type: string
    label: Password
    description: Set admin password for each host
    default: lilcliff
    hidden: true 

  public_net:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: 'public'

  dns:
    type: string
    label: DNS
    description: Set as '10.101.255.254'
    default: 10.101.255.254
    hidden: true

resources:
  rand_string:
    type: OS::Heat::RandomString
    properties:
      length: 4

# ----- Analyst Workstation Configuration Start ----- #
  analyst_workstation_port:
    type: OS::Neutron::Port
    description: Analyst IP
    properties:
      name:
        str_replace:
          template: analyst_workstation_port_RAND
          params:
            RAND: { get_resource: rand_string }
      network_id: gcc_gta_net
      #port_security_enabled: false
    
  analyst_workstation:
      type: OS::Nova::Server
      properties:
        name:
          str_replace:
            template: analyst_workstation_RAND
            params:
              RAND: { get_resource: rand_string }
        image: { get_param: image }
        flavor: { get_param: flavor }
        networks:
          - port: { get_resource: analyst_workstation_port }
        diskConfig: AUTO
        config_drive: true
        user_data_format: RAW
        user_data:
          str_replace:
            template: | #{ get_file: "https://gitlab.com/ga-cyberworkforceacademy/cyber-dawg-2021/-/raw/master/range/GCC/HOSTS/user_scripts/analyst.sh" }
              #!/bin/bash

              # ----- Change default gateway to vyos router
              ip route add default via 10.220.0.253

              # ----- CREATES USER GROUPS
              echo "root:$pass" | chpasswd
              useradd -m -U -s /bin/bash $user
              usermod -aG sudo $user
              echo "$user:$userpass" | chpasswd
              echo "domain kinetic" > /etc/resolv.conf
              echo "search kinetic" >>/etc/resolv.conf
              echo "nameserver $domain" >>/etc/resolv.conf
              # ----- ENABLE SUDO NOPASSWD
              sed -i '/# %wheel        ALL=(ALL)       NOPASSWD: ALL/ c\%wheel        ALL=(ALL)       NOPASSWD: ALL' /etc/sudoers
              # ----- ENABLES SSH[8]in prohibit-password/ c\PermitRootLogin yes' /etc/ssh/sshd_config
              sed -i '/#Port 22/ c\Port 22' /etc/ssh/sshd_config
              sed -i '/#AllowTcpForwarding yes/AllowTcpForwarding yes/' /etc/ssh/sshd_config
              service sshd restart
              # ----- updates
              apt-get update -y
              #apt-get upgrade -y
              echo "*** Installing PT ***"
              # ----- Packet Tracer Install
              mkdir /usr/share/packet_tracer
              wget "https://gitlab.com/ga-cyberworkforceacademy/cyber-dawg-2021/-/raw/master/range/GCC/resources/Cisco-PT-7.1.1x64.tar"
              tar xvf Cisco-PT-7.1.1x64.tar
              rm install
              cat <<EOF > install.sh
              #!/bin/bash
              # Thanks to Brent C., Ruben L., Alan C. for updating this install script to make it install without prompts.
              # Thanks to Paul Fedele for providing script to check/download 32-bit library on a 64-bit machine
              echo
              echo "Welcome to Cisco Packet Tracer 7.1.1 Installation"
              echo
              installer ()
              {
              SDIR=`dirname $_`
              echo "Packet Tracer will now be installed in the default location [/opt/pt]"
              IDIR="/opt/pt"
              if [ -e \$IDIR ]; then
              rm -rf \$IDIR
              fi
              QIDIR=\${IDIR//\//\\\\\/}
              echo "Installing into \$IDIR"
              if mkdir \$IDIR > /dev/null 2>&1; then
              if cp -r \$SDIR/* \$IDIR; then
              echo "Copied all files successfully to \$IDIR"
              fi
              sh -c "sed s%III%\$QIDIR% \$SDIR/tpl.packettracer > \$IDIR/packettracer"
              chmod a+x \$IDIR/packettracer
              sh -c "sed s%III%\$QIDIR% \$SDIR/tpl.linguist > \$IDIR/linguist"
              chmod a+x \$IDIR/linguist
              if touch /usr/share/applications/pt7.desktop > /dev/null 2>&1; then
              echo -e "[Desktop Entry]\nExec=PacketTracer7\nIcon=pt7\nType=Application\nTerminal=false\nName=Packet Tracer 7.1" | tee /usr/share/applications/pt7.desktop > /dev/null
              rm -f /usr/share/icons/hicolor/48x48/apps/pt7.png
              gtk-update-icon-cache -f -q /usr/share/icons/hicolor
              sleep 10
              cp $SDIR/art/app.png /usr/share/icons/hicolor/48x48/apps/pt7.png
              gtk-update-icon-cache -f -q /usr/share/icons/hicolor
              fi
              else
              echo
              if mkdir \$IDIR; then
              echo "Installing into \$IDIR"
              if cp -r \$SDIR/* \$IDIR; then
              echo "Copied all files successfully to \$IDIR"
              else
              echo
              echo "Not able to copy files to \$IDIR"
              echo "Exiting installation"
              exit
              fi
              sh -c "sed 's/III/\$QIDIR/ \$SDIR/tpl.packettracer > \$IDIR/packettracer'"
              chmod a+x \$IDIR/packettracer
              sh -c "sed 's/III/\$QIDIR/ \$SDIR/tpl.linguist > \$IDIR/linguist'"
              chmod a+x \$IDIR/linguist
              if touch /usr/share/applications/pt7.desktop; then
              echo -e "[Desktop Entry]\nExec=PacketTracer7\nIcon=pt7\nType=Application\nTerminal=false\nName=Packet Tracer 7.1" | tee /usr/share/applications/pt7.desktop > /dev/null
              rm -f /usr/share/icons/hicolor/48x48/apps/pt7.png
              gtk-update-icon-cache -f -q /usr/share/icons/hicolor
              sleep 10
              cp \$SDIR/art/app.png /usr/share/icons/hicolor/48x48/apps/pt7.png
              gtk-update-icon-cache -f -q /usr/share/icons/hicolor
              fi
              else
              echo
              echo "Not able to gain root access with sudo"
              echo "Exiting installation"
              exit
              fi
              fi
              echo
              echo
              ln -sf \$IDIR/packettracer /usr/local/bin/packettracer
              echo "Type \"packettracer\" in a terminal to start Cisco Packet Tracer"
              # add the environment var PT7HOME
              sh set_ptenv.sh $IDIR
              sh set_qtenv.sh
              echo
              echo "Cisco Packet Tracer 7.1.1 installed successfully"
              echo "Please restart you computer for the Packet Tracer settings to take effect"
              }
              installer
              exit 0
              EOF
              chmod +x install.sh
              ./install.sh
              cat <<__EOF__ > packettracer
              #!/bin/bash
              echo "Starting Packet Tracer 7.1.1"
              PTDIR=/opt/pt
              #export LD_LIBRARY_PATH=\$PTDIR/lib
              pushd \$PTDIR/bin > /dev/null
              ./PacketTracer7 "\$@" > /dev/null 2>&1 &
              popd > /dev/null
              __EOF__
              chmod +x packettracer
              cp packettracer /usr/local/bin/packettracer
              reboot
            params:
              $user: { get_param: username }
              $pass: { get_param: user_pass }
              $domain: { get_param: dns }
# ----- Analyst Workstation Configuration End ----- #

outputs:
  name:
    description: Name of the Linux Ops Station.
    value: { get_attr: [analyst_workstation, name] }
  port:
    description: The network port of the analyst workstation.
    value: { get_resource: analyst_workstation_port }
